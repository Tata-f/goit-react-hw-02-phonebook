{"version":3,"sources":["components/Container/Container.module.css","components/Form/Form.js","components/ContactsList/ContactsList.js","components/Filter/Filter.js","components/Container/Container.js","App.js","index.js"],"names":["module","exports","Form","state","name","number","nameInputId","shortid","generate","numberInputId","handleInputChange","e","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","resetForm","this","htmlFor","id","onChange","type","pattern","title","required","Component","ContactsList","contacts","onDeleteContact","map","onClick","Filter","Container","children","className","s","container","App","filter","addContact","contact","includes","alert","deleteContact","contactId","prevState","changeFilter","target","getFilteredContacts","normalizedFilter","toLowerCase","filteredContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a175ffc1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__tX2CS\"};","import React, { Component } from 'react';\nimport shortid from 'shortid';\nimport PropTypes from 'prop-types';\nimport s from './Form.module.css';\n\nclass Form extends Component {\n  static propTypes = {\n    name: PropTypes.string,\n    number: PropTypes.string,\n  };\n\n  state = {\n    name: '',\n    number: '',\n  };\n\n  nameInputId = shortid.generate();\n  numberInputId = shortid.generate();\n\n  handleInputChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = e => {\n    const { name, number } = this.state;\n\n    e.preventDefault();\n\n    this.props.onSubmit(name, number);\n\n    this.resetForm();\n  };\n\n  resetForm = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    const { name, number } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label htmlFor={this.nameInputId}>\n          Name\n          <input\n            id={this.nameInputId}\n            onChange={this.handleInputChange}\n            type=\"text\"\n            value={name}\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <label htmlFor={this.numberInputId}>\n          Number\n          <input\n            id={this.numberInputId}\n            onChange={this.handleInputChange}\n            type=\"tel\"\n            value={number}\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n        <button type=\"submit\">Add contact</button>\n      </form>\n    );\n  }\n}\n\nexport default Form;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './ContactsList.module.css';\n\nconst ContactsList = ({ contacts, onDeleteContact }) => {\n  return (\n    <>\n      <p>Contacts</p>\n      <ul>\n        {contacts.map(({ id, name, number }) => (\n          <li key={id}>\n            {name}: {number}\n            <button onClick={() => onDeleteContact(id)} type=\"button\">\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nContactsList.propTypes = {\n  onDeleteContact: PropTypes.func,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nexport default ContactsList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Filter.module.css';\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <>\n      <p>Find contacts by name</p>\n      <label>\n        <input type=\"text\" value={value} onChange={onChange}></input>\n      </label>\n    </>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nexport default Filter;\n","import React from 'react';\nimport s from './Container.module.css';\nimport PropTypes from 'prop-types';\n\nexport default function Container({ children }) {\n  return <div className={s.container}>{children}</div>;\n}\n\nContainer.propTypes = {\n  children: PropTypes.node,\n};\n","import React, { Component } from 'react';\nimport Form from './components/Form';\nimport ContactsList from './components/ContactsList';\nimport Filter from './components/Filter';\nimport Container from './components/Container';\nimport shortid from 'shortid';\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: '',\n  };\n\n  addContact = (name, number) => {\n    const { contacts } = this.state;\n    const contact = {\n      name,\n      number,\n      id: shortid.generate(),\n    };\n    const dubbleContact = contacts.map(contact => contact.name).includes(name);\n\n    if (dubbleContact) {\n      alert(`${name} is already in contacts`);\n    } else {\n      this.setState(({ contacts }) => ({\n        contacts: [contact, ...contacts],\n      }));\n    }\n  };\n\n  deleteContact = contactId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n    }));\n  };\n\n  changeFilter = e => {\n    this.setState({ filter: e.target.value });\n  };\n\n  getFilteredContacts = () => {\n    const { filter, contacts } = this.state;\n\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  render() {\n    const { filter } = this.state;\n    const filteredContacts = this.getFilteredContacts();\n\n    return (\n      <>\n        <Container>\n          <Form onSubmit={this.addContact}></Form>\n        </Container>\n\n        <Container>\n          <ContactsList\n            onDeleteContact={this.deleteContact}\n            contacts={filteredContacts}\n          ></ContactsList>\n        </Container>\n\n        <Container>\n          <Filter onChange={this.changeFilter} value={filter}></Filter>\n        </Container>\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}